// **********************************************************************
//
// Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.1
//
// <auto-generated>
//
// Generated from file `User.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.project.slice.User;

public class UserDto implements java.lang.Cloneable, java.io.Serializable
{
    public long id;

    public String loginName;

    public UserDto()
    {
        loginName = "";
    }

    public UserDto(long id, String loginName)
    {
        this.id = id;
        this.loginName = loginName;
    }

    public boolean
    equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        UserDto _r = null;
        if(rhs instanceof UserDto)
        {
            _r = (UserDto)rhs;
        }

        if(_r != null)
        {
            if(id != _r.id)
            {
                return false;
            }
            if(loginName != _r.loginName)
            {
                if(loginName == null || _r.loginName == null || !loginName.equals(_r.loginName))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int
    hashCode()
    {
        int __h = 5381;
        __h = IceInternal.HashUtil.hashAdd(__h, "::User::UserDto");
        __h = IceInternal.HashUtil.hashAdd(__h, id);
        __h = IceInternal.HashUtil.hashAdd(__h, loginName);
        return __h;
    }

    public UserDto
    clone()
    {
        UserDto c = null;
        try
        {
            c = (UserDto)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeLong(id);
        __os.writeString(loginName);
    }

    public void
    __read(IceInternal.BasicStream __is)
    {
        id = __is.readLong();
        loginName = __is.readString();
    }

    static public void
    __write(IceInternal.BasicStream __os, UserDto __v)
    {
        if(__v == null)
        {
            __nullMarshalValue.__write(__os);
        }
        else
        {
            __v.__write(__os);
        }
    }

    static public UserDto
    __read(IceInternal.BasicStream __is, UserDto __v)
    {
        if(__v == null)
        {
             __v = new UserDto();
        }
        __v.__read(__is);
        return __v;
    }
    
    private static final UserDto __nullMarshalValue = new UserDto();

    public static final long serialVersionUID = -595010243L;
}
